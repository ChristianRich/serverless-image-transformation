service: ${file(./package.json):name}
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
package:
  individually: true
provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs16.x
  apiGateway:
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - "*/*"
  tracing:
    apiGateway: true
  environment:
    SERVICE_NAME: ${self:service}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
    NODE_ENV: ${sls:stage}
    IMAGE_BUCKET_NAME: ${self:custom.imageBucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - Fn::GetAtt: [ImageBucket, Arn]
layers:
  sharp:
    name: ${sls:stage}-sharp-layer
    description: Sharp nodejs imaging library as a layer
    package:
      artifact: ./layers/sharp-0.31.2-aws-lambda-linux-x64-node-16.17.0.zip
    compatibleRuntimes:
      - nodejs16.x
    allowedAccounts:
      - "*"
    retain: false
custom:
  imageBucketName: ${self:service}-${sls:stage}-images
  imageProcessingJobTableName: ${self:service}-${sls:stage}-jobs
  serverless-offline:
    allowCache: true # Preserve memory
    useChildProcesses: true
    useSeparateProcesses: true
    httpPort: 3000
  prune:
    automatic: true
    number: 3
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
      - sharp
    packagerOptions:
      scripts:
        - npm install --arch=x64 --platform=linux sharp
    target: node16
    platform: node
    concurrency: 10
functions:
  getPreSignedUrl:
    handler: src/handlers/pre-signed-url.handler
    events:
      - http:
          path: /url/{type}
          method: post
          cors: true
          private: false
  transform:
    handler: src/handlers/transform.handler
    layers:
      - !Ref SharpLambdaLayer
    events:
      - http:
          path: /
          method: post
          cors: true
          private: false
resources:
  Resources:
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucketName}
        AccessControl: PublicRead
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImageBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub ${ImageBucket.Arn}/*
              Principal: "*"
