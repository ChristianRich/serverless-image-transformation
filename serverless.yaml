service: ${file(./package.json):name}
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
package:
  individually: true
provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs16.x
  apiGateway:
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - "*/*"
  tracing:
    apiGateway: true
  environment:
    SERVICE_NAME: ${self:service}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
    NODE_ENV: ${sls:stage}
    IMAGE_BUCKET_NAME: ${self:custom.imageBucketName}
    FILE_SIZE_POST_UPLOAD_LIMIT_MB: "25"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - Fn::GetAtt: [ImageBucket, Arn]
layers:
  sharp:
    name: ${sls:stage}-sharp-layer
    description: Sharp nodejs imaging library as a layer
    package:
      artifact: ./layers/sharp-0.31.2-aws-lambda-linux-x64-node-16.17.0.zip
    compatibleRuntimes:
      - nodejs16.x
    allowedAccounts:
      - "*"
    retain: false
custom:
  imageBucketName: ${self:service}-${sls:stage}-images
  imageProcessingJobTableName: ${self:service}-${sls:stage}-jobs
  serverless-offline:
    allowCache: true # Preserve memory
    useChildProcesses: true
    useSeparateProcesses: true
    httpPort: 3000
  prune:
    automatic: true
    number: 3
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
      - sharp
    packagerOptions:
      scripts:
        - npm install --arch=x64 --platform=linux sharp
    target: node16
    platform: node
    concurrency: 10
  apiKeys:
    - name: apikey
      value: ${ssm:/aws/reference/secretsmanager/dev/sls-image-transform/api-key} # This path MUST be valid or deployment will fail
      deleteAtRemoval: false # Retain secret when stack is removed
functions:
  getPreSignedUrl:
    handler: src/handlers/pre-signed-url.handler
    description: |
      Returns a pre-signed S3 upload url. For the type parameter, use either '/s2s' or '/form'
    events:
      - http:
          path: /presign/{type}/{filename}
          method: get
          cors: true
          private: true
  transformAsync:
    handler: src/handlers/transform-async.handler
    description: |
      Accepts image transformation options (source, destination, options and commands)
      and either returns the transformation result as `Content-Type: image/*` or uploads to S3 (asyncronious invocation)
    layers:
      - !Ref SharpLambdaLayer
    events:
      - http:
          path: /async
          method: post
          cors: true
          private: true
  transformSync:
    handler: src/handlers/transform-sync.handler
    description: |
      Accepts image transformation optionn, immediately return the S3 image URL, and then process the upload in the background (syncronious invocation)
    layers:
      - !Ref SharpLambdaLayer
    events:
      - http:
          path: /sync
          method: post
          cors: true
          private: true
  getImageMetaData:
    handler: src/handlers/meta-data.handler
    description: |
      Accepts an image and returns the meta-data
    events:
      - http:
          path: /meta-data
          method: get
          cors: true
          private: true
resources:
  Resources:
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucketName}
        AccessControl: PublicRead
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImageBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub ${ImageBucket.Arn}/*
              Principal: "*"
