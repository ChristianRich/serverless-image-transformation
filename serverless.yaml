service: ${file(./package.json):name}
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
package:
  individually: true
provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs16.x
  apiGateway:
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - "*/*"
  tracing:
    apiGateway: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
    NODE_ENV: ${sls:stage}
    IMAGE_BUCKET_NAME: ${self:custom.imageBucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - Fn::GetAtt: [ImageBucket, Arn]
            # - "*"
layers:
  sharp:
    name: ${sls:stage}-sharp-layer
    description: Sharp nodejs imaging library as a layer
    package:
      artifact: ./layers/sharp-0.31.2-aws-lambda-linux-x64-node-16.17.0.zip
    compatibleRuntimes:
      - nodejs16.x
    allowedAccounts:
      - "*"
    retain: false # optional, false by default. If true, layer versions are not deleted as new ones are created
custom:
  imageBucketName: ${self:service}-${sls:stage}-images
  imageProcessingJobTableName: ${self:service}-${sls:stage}-jobs
  serverless-offline:
    allowCache: true # Preserve memory
    useChildProcesses: true
    useSeparateProcesses: true
    httpPort: 3000
  prune:
    automatic: true
    number: 3
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
      - sharp
    # external:
    #   - sharp
    packagerOptions:
      scripts:
        - npm install --arch=x64 --platform=linux sharp
    target: node16
    platform: node
    concurrency: 10
functions:
  getPreSignedPUTUrl:
    handler: src/handlers/pre-signed-put-url.handler
    events:
      - http:
          path: /upload/url/put
          method: get
          cors: true
          private: false
  getPreSignedPOSTUrl:
    handler: src/handlers/pre-signed-post-url.handler
    events:
      - http:
          path: /upload/url/post
          method: get
          cors: true
          private: false
  imageProcessorWorker:
    handler: src/workers/image-processor.handler
    layers:
      - !Ref SharpLambdaLayer
    events:
      - s3:
          bucket: ${self:custom.imageBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: temp/
  imageProcessorHttp:
    handler: src/handlers/image-processor.handler
    layers:
      - !Ref SharpLambdaLayer
    events:
      - http:
          path: /process
          method: post
          cors: true
          private: false
resources:
  Resources:
    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.imageProcessingJobTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucketName}
        AccessControl: PublicRead
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImageBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub ${ImageBucket.Arn}/*
              Principal: "*"
